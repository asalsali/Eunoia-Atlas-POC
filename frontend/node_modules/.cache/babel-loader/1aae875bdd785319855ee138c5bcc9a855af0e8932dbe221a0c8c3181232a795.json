{"ast":null,"code":"import axios from 'axios';\n\n// Use relative base URL by default so production can proxy via serve.json rewrites\n// If REACT_APP_API_URL is provided at build time, it will be used instead\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const getTotals = async () => {\n  try {\n    // Add cache-busting parameter to ensure fresh data\n    const response = await api.get('/totals', {\n      params: {\n        _t: Date.now()\n      }\n    });\n    console.log('Fetched totals:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching totals:', error);\n    // Return default values if API fails\n    return {\n      MEDA: 0,\n      TARA: 0\n    };\n  }\n};\nexport const makeDonation = async donation => {\n  try {\n    const response = await api.post('/donate', donation);\n    return response.data;\n  } catch (error) {\n    console.error('Error making donation:', error);\n    throw error;\n  }\n};\nexport const requestPayout = async charity => {\n  try {\n    const response = await api.post(`/payout/${charity}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error requesting payout:', error);\n    throw error;\n  }\n};\n\n// New donor intent submission\n\nexport const submitDonorIntent = async payload => {\n  try {\n    const response = await api.post('/donations', payload);\n    return response.data;\n  } catch (error) {\n    console.error('Error submitting donor intent:', error);\n    throw error;\n  }\n};\n\n// Server-signed demo: send 1 RLUSD from a provided user seed to a charity\n\nexport const demoUserToCharity = async payload => {\n  try {\n    const response = await api.post('/demo/user-to-charity', payload);\n    return response.data;\n  } catch (error) {\n    console.error('Error calling demo user-to-charity:', error);\n    throw error;\n  }\n};\n\n// Xaman server-side payload creation\n\nexport const xamanCreatePayment = async payload => {\n  const resp = await api.post('/xaman/create-payment', payload);\n  return resp.data;\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","getTotals","response","get","params","_t","Date","now","console","log","data","error","MEDA","TARA","makeDonation","donation","post","requestPayout","charity","submitDonorIntent","payload","demoUserToCharity","xamanCreatePayment","resp"],"sources":["C:/Users/Alex Salsali/Desktop/Eunoia-Atlas-POC/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\n// Use relative base URL by default so production can proxy via serve.json rewrites\n// If REACT_APP_API_URL is provided at build time, it will be used instead\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport interface DonationRequest {\n  charity: string;\n  cid: string;\n  amount: number;\n  donor_email?: string;\n}\n\nexport interface DonationResponse {\n  tx: string;\n  track: string;\n}\n\nexport interface TotalsResponse {\n  MEDA?: number;\n  TARA?: number;\n}\n\nexport const getTotals = async (): Promise<TotalsResponse> => {\n  try {\n    // Add cache-busting parameter to ensure fresh data\n    const response = await api.get('/totals', {\n      params: {\n        _t: Date.now()\n      }\n    });\n    console.log('Fetched totals:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching totals:', error);\n    // Return default values if API fails\n    return { MEDA: 0, TARA: 0 };\n  }\n};\n\nexport const makeDonation = async (donation: DonationRequest): Promise<DonationResponse> => {\n  try {\n    const response = await api.post('/donate', donation);\n    return response.data;\n  } catch (error) {\n    console.error('Error making donation:', error);\n    throw error;\n  }\n};\n\nexport const requestPayout = async (charity: string): Promise<any> => {\n  try {\n    const response = await api.post(`/payout/${charity}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error requesting payout:', error);\n    throw error;\n  }\n};\n\n// New donor intent submission\nexport interface DonorIntentRequest {\n  donorIntent: string;\n  amountFiat: number;\n  currency: 'CAD';\n  donorEmail: string;\n  isPublic: boolean;\n}\n\nexport interface DonorIntentResponse {\n  success?: boolean;\n  transactionHash?: string;\n  transactionUrl?: string;\n  message?: string;\n}\n\nexport const submitDonorIntent = async (\n  payload: DonorIntentRequest\n): Promise<DonorIntentResponse> => {\n  try {\n    const response = await api.post('/donations', payload);\n    return response.data;\n  } catch (error) {\n    console.error('Error submitting donor intent:', error);\n    throw error;\n  }\n}; \n\n// Server-signed demo: send 1 RLUSD from a provided user seed to a charity\nexport interface DemoUserToCharityRequest {\n  sender_seed: string;\n  charity: string; // e.g., 'MEDA'\n  amount?: number; // defaults to 1\n  cause_id?: string;\n}\n\nexport interface DemoUserToCharityResponse {\n  tx: string;\n  track: string;\n}\n\nexport const demoUserToCharity = async (\n  payload: DemoUserToCharityRequest\n): Promise<DemoUserToCharityResponse> => {\n  try {\n    const response = await api.post('/demo/user-to-charity', payload);\n    return response.data;\n  } catch (error) {\n    console.error('Error calling demo user-to-charity:', error);\n    throw error;\n  }\n};\n\n// Xaman server-side payload creation\nexport interface XamanCreatePaymentRequest {\n  destination: string;\n  amount: number;\n  charity: string;\n  cause_id: string;\n  asset?: string; // 'XRP' for native XRP\n  issuer?: string; // optional issuer for IOU\n}\n\nexport interface XamanCreatePaymentResponse {\n  success: boolean;\n  payloadId?: string;\n  qrCode?: string;\n  refs?: any;\n  error?: string;\n}\n\nexport const xamanCreatePayment = async (\n  payload: XamanCreatePaymentRequest\n): Promise<XamanCreatePaymentResponse> => {\n  const resp = await api.post('/xaman/create-payment', payload);\n  return resp.data;\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,EAAE;AAExD,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAmBF,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAqC;EAC5D,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,SAAS,EAAE;MACxCC,MAAM,EAAE;QACNC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC;MACf;IACF,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEP,QAAQ,CAACQ,IAAI,CAAC;IAC7C,OAAOR,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C;IACA,OAAO;MAAEC,IAAI,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAE,CAAC;EAC7B;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAyB,IAAgC;EAC1F,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAML,GAAG,CAACmB,IAAI,CAAC,SAAS,EAAED,QAAQ,CAAC;IACpD,OAAOb,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMM,aAAa,GAAG,MAAOC,OAAe,IAAmB;EACpE,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAML,GAAG,CAACmB,IAAI,CAAC,WAAWE,OAAO,EAAE,CAAC;IACrD,OAAOhB,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;;AAgBA,OAAO,MAAMQ,iBAAiB,GAAG,MAC/BC,OAA2B,IACM;EACjC,IAAI;IACF,MAAMlB,QAAQ,GAAG,MAAML,GAAG,CAACmB,IAAI,CAAC,YAAY,EAAEI,OAAO,CAAC;IACtD,OAAOlB,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;;AAaA,OAAO,MAAMU,iBAAiB,GAAG,MAC/BD,OAAiC,IACM;EACvC,IAAI;IACF,MAAMlB,QAAQ,GAAG,MAAML,GAAG,CAACmB,IAAI,CAAC,uBAAuB,EAAEI,OAAO,CAAC;IACjE,OAAOlB,QAAQ,CAACQ,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;;AAkBA,OAAO,MAAMW,kBAAkB,GAAG,MAChCF,OAAkC,IACM;EACxC,MAAMG,IAAI,GAAG,MAAM1B,GAAG,CAACmB,IAAI,CAAC,uBAAuB,EAAEI,OAAO,CAAC;EAC7D,OAAOG,IAAI,CAACb,IAAI;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}