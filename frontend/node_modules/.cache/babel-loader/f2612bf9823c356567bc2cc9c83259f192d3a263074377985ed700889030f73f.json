{"ast":null,"code":"// User Wallet Service for XRPL Donations\nimport { XummSdk } from 'xumm-sdk';\n\n// Check if XUMM SDK is available\nlet xumm = null;\nlet isXummAvailable = false;\ntry {\n  const apiKey = process.env.REACT_APP_XUMM_API_KEY;\n  const apiSecret = process.env.REACT_APP_XUMM_API_SECRET;\n  if (apiKey && apiSecret && apiKey !== 'your-api-key' && apiSecret !== 'your-api-secret') {\n    xumm = new XummSdk(apiKey, apiSecret);\n    isXummAvailable = true;\n    console.log('XUMM SDK initialized for user wallets');\n  } else {\n    console.warn('XUMM credentials not properly configured for user wallets');\n  }\n} catch (error) {\n  console.error('Failed to initialize XUMM SDK for user wallets:', error);\n  isXummAvailable = false;\n}\n\n// Convert string to hex for memo data\nfunction convertStringToHex(str) {\n  return Buffer.from(str).toString('hex');\n}\n\n// User wallet status\nexport const userWalletStatus = {\n  isAvailable: isXummAvailable,\n  message: isXummAvailable ? 'User wallet integration active' : 'User wallet integration disabled - using demo mode'\n};\n\n// Create a donation payload for user to sign\nexport async function createUserDonationPayload(destination, amount, charity, causeId, donorEmail) {\n  if (!isXummAvailable || !xumm) {\n    console.warn('XUMM not available, returning mock payload');\n    return {\n      success: true,\n      payloadId: `mock-user-${Date.now()}`,\n      qrCode: `https://xumm.app/sign/mock-user-${Date.now()}`,\n      message: 'User wallet integration disabled - using demo mode'\n    };\n  }\n  const memo = {\n    Memo: {\n      MemoData: convertStringToHex(JSON.stringify({\n        charity,\n        causeId,\n        donorEmail,\n        timestamp: new Date().toISOString()\n      }))\n    }\n  };\n  const paymentAmount = {\n    value: String(amount),\n    currency: '524C555344000000000000000000000000000000',\n    // RLUSD\n    issuer: 'rQhWct2fv4Vc4KRjRgMrxa8xPN9Zx9iLKV'\n  };\n  const request = {\n    TransactionType: 'Payment',\n    Destination: destination,\n    Memos: [memo],\n    Amount: paymentAmount\n  };\n  try {\n    const payload = await xumm.payload.create(request);\n    if (payload && payload.uuid) {\n      var _payload$refs;\n      return {\n        success: true,\n        payloadId: payload.uuid,\n        qrCode: ((_payload$refs = payload.refs) === null || _payload$refs === void 0 ? void 0 : _payload$refs.qr_png) || '',\n        message: 'Payment payload created successfully'\n      };\n    } else {\n      throw new Error('Failed to create payload');\n    }\n  } catch (error) {\n    console.error('Error creating user donation payload:', error);\n    return {\n      success: false,\n      error: 'Failed to create payment payload',\n      fallback: true\n    };\n  }\n}\n\n// Check user payment status\nexport async function checkUserPaymentStatus(payloadId) {\n  if (!isXummAvailable || !xumm) {\n    console.warn('XUMM not available, returning mock status');\n    return {\n      status: 'pending',\n      message: 'User wallet integration disabled'\n    };\n  }\n  try {\n    var _payload$response, _payload$response2;\n    const payload = await xumm.payload.get(payloadId);\n    return {\n      status: (payload === null || payload === void 0 ? void 0 : (_payload$response = payload.response) === null || _payload$response === void 0 ? void 0 : _payload$response.account) || 'pending',\n      signed: !!(payload !== null && payload !== void 0 && payload.response),\n      message: payload !== null && payload !== void 0 && payload.response ? 'Payment completed' : 'Payment pending',\n      transactionHash: (payload === null || payload === void 0 ? void 0 : (_payload$response2 = payload.response) === null || _payload$response2 === void 0 ? void 0 : _payload$response2.txid) || null\n    };\n  } catch (error) {\n    console.error('Error checking user payment status:', error);\n    return {\n      status: 'error',\n      message: 'Failed to check payment status'\n    };\n  }\n}\n\n// Get user wallet QR code\nexport async function getUserWalletQRCode(payloadId) {\n  if (!isXummAvailable || !xumm) {\n    console.warn('XUMM not available, returning fallback QR code');\n    return `https://xumm.app/sign/${payloadId}`;\n  }\n  try {\n    var _refs;\n    const payload = await xumm.payload.get(payloadId);\n    return (payload === null || payload === void 0 ? void 0 : (_refs = payload.refs) === null || _refs === void 0 ? void 0 : _refs.qr_png) || `https://xumm.app/sign/${payloadId}`;\n  } catch (error) {\n    console.error('Error getting user wallet QR code:', error);\n    return `https://xumm.app/sign/${payloadId}`;\n  }\n}\n\n// Create a simple user wallet (for demo purposes)\nexport function createDemoUserWallet() {\n  // This is a demo wallet - in production, users would create their own\n  const demoAddress = 'rDemoUser123456789012345678901234567890';\n  const demoSseed = 'sDemoSeed123456789012345678901234567890';\n  return {\n    address: demoAddress,\n    seed: demoSseed\n  };\n}","map":{"version":3,"names":["XummSdk","xumm","isXummAvailable","apiKey","process","env","REACT_APP_XUMM_API_KEY","apiSecret","REACT_APP_XUMM_API_SECRET","console","log","warn","error","convertStringToHex","str","Buffer","from","toString","userWalletStatus","isAvailable","message","createUserDonationPayload","destination","amount","charity","causeId","donorEmail","success","payloadId","Date","now","qrCode","memo","Memo","MemoData","JSON","stringify","timestamp","toISOString","paymentAmount","value","String","currency","issuer","request","TransactionType","Destination","Memos","Amount","payload","create","uuid","_payload$refs","refs","qr_png","Error","fallback","checkUserPaymentStatus","status","_payload$response","_payload$response2","get","response","account","signed","transactionHash","txid","getUserWalletQRCode","_refs","createDemoUserWallet","demoAddress","demoSseed","address","seed"],"sources":["C:/Users/Alex Salsali/Desktop/Eunoia-Atlas-POC/frontend/src/services/userWalletService.ts"],"sourcesContent":["// User Wallet Service for XRPL Donations\r\nimport { XummSdk } from 'xumm-sdk';\r\n\r\n// Check if XUMM SDK is available\r\nlet xumm: XummSdk | null = null;\r\nlet isXummAvailable = false;\r\n\r\ntry {\r\n  const apiKey = process.env.REACT_APP_XUMM_API_KEY;\r\n  const apiSecret = process.env.REACT_APP_XUMM_API_SECRET;\r\n  \r\n  if (apiKey && apiSecret && apiKey !== 'your-api-key' && apiSecret !== 'your-api-secret') {\r\n    xumm = new XummSdk(apiKey, apiSecret);\r\n    isXummAvailable = true;\r\n    console.log('XUMM SDK initialized for user wallets');\r\n  } else {\r\n    console.warn('XUMM credentials not properly configured for user wallets');\r\n  }\r\n} catch (error) {\r\n  console.error('Failed to initialize XUMM SDK for user wallets:', error);\r\n  isXummAvailable = false;\r\n}\r\n\r\n// Convert string to hex for memo data\r\nfunction convertStringToHex(str: string): string {\r\n  return Buffer.from(str).toString('hex');\r\n}\r\n\r\n// User wallet status\r\nexport const userWalletStatus = {\r\n  isAvailable: isXummAvailable,\r\n  message: isXummAvailable ? 'User wallet integration active' : 'User wallet integration disabled - using demo mode'\r\n};\r\n\r\n// Create a donation payload for user to sign\r\nexport async function createUserDonationPayload(\r\n  destination: string,\r\n  amount: number,\r\n  charity: string,\r\n  causeId: string,\r\n  donorEmail?: string\r\n): Promise<any> {\r\n  if (!isXummAvailable || !xumm) {\r\n    console.warn('XUMM not available, returning mock payload');\r\n    return {\r\n      success: true,\r\n      payloadId: `mock-user-${Date.now()}`,\r\n      qrCode: `https://xumm.app/sign/mock-user-${Date.now()}`,\r\n      message: 'User wallet integration disabled - using demo mode'\r\n    };\r\n  }\r\n\r\n  const memo = {\r\n    Memo: {\r\n      MemoData: convertStringToHex(JSON.stringify({\r\n        charity,\r\n        causeId,\r\n        donorEmail,\r\n        timestamp: new Date().toISOString()\r\n      })),\r\n    },\r\n  };\r\n\r\n  const paymentAmount = {\r\n    value: String(amount),\r\n    currency: '524C555344000000000000000000000000000000', // RLUSD\r\n    issuer: 'rQhWct2fv4Vc4KRjRgMrxa8xPN9Zx9iLKV',\r\n  };\r\n\r\n  const request = {\r\n    TransactionType: 'Payment' as const,\r\n    Destination: destination,\r\n    Memos: [memo],\r\n    Amount: paymentAmount,\r\n  };\r\n\r\n  try {\r\n    const payload = await xumm.payload.create(request);\r\n    \r\n    if (payload && payload.uuid) {\r\n      return {\r\n        success: true,\r\n        payloadId: payload.uuid,\r\n        qrCode: payload.refs?.qr_png || '',\r\n        message: 'Payment payload created successfully'\r\n      };\r\n    } else {\r\n      throw new Error('Failed to create payload');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating user donation payload:', error);\r\n    return {\r\n      success: false,\r\n      error: 'Failed to create payment payload',\r\n      fallback: true\r\n    };\r\n  }\r\n}\r\n\r\n// Check user payment status\r\nexport async function checkUserPaymentStatus(payloadId: string): Promise<any> {\r\n  if (!isXummAvailable || !xumm) {\r\n    console.warn('XUMM not available, returning mock status');\r\n    return {\r\n      status: 'pending',\r\n      message: 'User wallet integration disabled'\r\n    };\r\n  }\r\n\r\n  try {\r\n    const payload = await xumm.payload.get(payloadId);\r\n    return {\r\n      status: payload?.response?.account || 'pending',\r\n      signed: !!payload?.response,\r\n      message: payload?.response ? 'Payment completed' : 'Payment pending',\r\n      transactionHash: payload?.response?.txid || null\r\n    };\r\n  } catch (error) {\r\n    console.error('Error checking user payment status:', error);\r\n    return {\r\n      status: 'error',\r\n      message: 'Failed to check payment status'\r\n    };\r\n  }\r\n}\r\n\r\n// Get user wallet QR code\r\nexport async function getUserWalletQRCode(payloadId: string): Promise<string> {\r\n  if (!isXummAvailable || !xumm) {\r\n    console.warn('XUMM not available, returning fallback QR code');\r\n    return `https://xumm.app/sign/${payloadId}`;\r\n  }\r\n\r\n  try {\r\n    const payload = await xumm.payload.get(payloadId);\r\n    return (payload as any)?.refs?.qr_png || `https://xumm.app/sign/${payloadId}`;\r\n  } catch (error) {\r\n    console.error('Error getting user wallet QR code:', error);\r\n    return `https://xumm.app/sign/${payloadId}`;\r\n  }\r\n}\r\n\r\n// Create a simple user wallet (for demo purposes)\r\nexport function createDemoUserWallet(): { address: string; seed: string } {\r\n  // This is a demo wallet - in production, users would create their own\r\n  const demoAddress = 'rDemoUser123456789012345678901234567890';\r\n  const demoSseed = 'sDemoSeed123456789012345678901234567890';\r\n  \r\n  return {\r\n    address: demoAddress,\r\n    seed: demoSseed\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}