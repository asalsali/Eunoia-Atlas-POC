{"ast":null,"code":"// User Wallet Service for XRPL Donations\nimport { XummSdk } from 'xumm-sdk';\n\n// Check if XUMM SDK is available\nlet xumm = null;\nlet isXummAvailable = false;\ntry {\n  let apiKey = process.env.REACT_APP_XAMAN_API_KEY || process.env.REACT_APP_XUMM_API_KEY;\n  let apiSecret = process.env.REACT_APP_XAMAN_API_SECRET || process.env.REACT_APP_XUMM_API_SECRET;\n  if (!apiKey || !apiSecret) {\n    // Fallback for demo if build-time env didn’t inject\n    apiKey = 'ba1b287b-3c39-4db2-a5d3-78e5d9ce61d5';\n    apiSecret = 'a23f1e70-bb23-4e3f-98e5-b2ef3ad02d1c';\n  }\n  if (apiKey && apiSecret && apiKey !== 'your-api-key' && apiSecret !== 'your-api-secret') {\n    xumm = new XummSdk(apiKey, apiSecret);\n    isXummAvailable = true;\n    console.log('Xaman (XUMM) SDK initialized for user wallets');\n  } else {\n    console.warn('Xaman credentials not properly configured for user wallets');\n  }\n} catch (error) {\n  console.error('Failed to initialize Xaman SDK for user wallets:', error);\n  isXummAvailable = false;\n}\n\n// Convert string to hex for memo data (browser-safe, no Node Buffer)\nfunction convertStringToHex(str) {\n  const encoder = new TextEncoder();\n  const bytes = encoder.encode(str);\n  let hex = '';\n  for (const b of bytes) hex += b.toString(16).padStart(2, '0');\n  return hex;\n}\n\n// User wallet status\nexport const userWalletStatus = {\n  isAvailable: isXummAvailable,\n  message: isXummAvailable ? 'User wallet integration active' : 'User wallet integration disabled - using demo mode'\n};\n\n// Create a donation payload for user to sign\nexport async function createUserDonationPayload(destination, amount, charity, causeId, donorEmail) {\n  if (!isXummAvailable || !xumm) {\n    console.warn('Xaman not available, returning mock payload');\n    return {\n      success: true,\n      payloadId: `mock-user-${Date.now()}`,\n      qrCode: `https://xumm.app/sign/mock-user-${Date.now()}`,\n      message: 'User wallet (Xaman) integration disabled - using demo mode'\n    };\n  }\n  const memo = {\n    Memo: {\n      MemoData: convertStringToHex(JSON.stringify({\n        charity,\n        causeId,\n        donorEmail,\n        timestamp: new Date().toISOString()\n      }))\n    }\n  };\n  const paymentAmount = {\n    value: String(amount),\n    currency: '524C555344000000000000000000000000000000',\n    // RLUSD\n    issuer: 'rQhWct2fv4Vc4KRjRgMrxa8xPN9Zx9iLKV'\n  };\n  const request = {\n    TransactionType: 'Payment',\n    Destination: destination,\n    Memos: [memo],\n    Amount: paymentAmount\n  };\n  try {\n    const payload = await xumm.payload.create(request);\n    if (payload && payload.uuid) {\n      var _payload$refs;\n      return {\n        success: true,\n        payloadId: payload.uuid,\n        qrCode: ((_payload$refs = payload.refs) === null || _payload$refs === void 0 ? void 0 : _payload$refs.qr_png) || '',\n        message: 'Payment payload created successfully'\n      };\n    } else {\n      throw new Error('Failed to create payload');\n    }\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Error creating user donation payload (Xaman):', error);\n    const message = (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || (error === null || error === void 0 ? void 0 : error.message) || 'Failed to create payment payload';\n    return {\n      success: false,\n      error: message,\n      fallback: true\n    };\n  }\n}\n\n// Check user payment status\nexport async function checkUserPaymentStatus(payloadId) {\n  if (!isXummAvailable || !xumm) {\n    console.warn('Xaman not available, returning mock status');\n    return {\n      status: 'pending',\n      message: 'User wallet (Xaman) integration disabled'\n    };\n  }\n  try {\n    var _payload$response, _payload$response2;\n    const payload = await xumm.payload.get(payloadId);\n    return {\n      status: (payload === null || payload === void 0 ? void 0 : (_payload$response = payload.response) === null || _payload$response === void 0 ? void 0 : _payload$response.account) || 'pending',\n      signed: !!(payload !== null && payload !== void 0 && payload.response),\n      message: payload !== null && payload !== void 0 && payload.response ? 'Payment completed' : 'Payment pending',\n      transactionHash: (payload === null || payload === void 0 ? void 0 : (_payload$response2 = payload.response) === null || _payload$response2 === void 0 ? void 0 : _payload$response2.txid) || null\n    };\n  } catch (error) {\n    console.error('Error checking user payment status:', error);\n    return {\n      status: 'error',\n      message: 'Failed to check payment status'\n    };\n  }\n}\n\n// Get user wallet QR code\nexport async function getUserWalletQRCode(payloadId) {\n  if (!isXummAvailable || !xumm) {\n    console.warn('Xaman not available, returning fallback QR code');\n    return `https://xumm.app/sign/${payloadId}`;\n  }\n  try {\n    var _refs;\n    const payload = await xumm.payload.get(payloadId);\n    return (payload === null || payload === void 0 ? void 0 : (_refs = payload.refs) === null || _refs === void 0 ? void 0 : _refs.qr_png) || `https://xumm.app/sign/${payloadId}`;\n  } catch (error) {\n    console.error('Error getting user wallet QR code (Xaman):', error);\n    return `https://xumm.app/sign/${payloadId}`;\n  }\n}\n\n// Create a simple user wallet (for demo purposes)\nexport function createDemoUserWallet() {\n  // This is a demo wallet - in production, users would create their own\n  const demoAddress = 'rDemoUser123456789012345678901234567890';\n  const demoSseed = 'sDemoSeed123456789012345678901234567890';\n  return {\n    address: demoAddress,\n    seed: demoSseed\n  };\n}","map":{"version":3,"names":["XummSdk","xumm","isXummAvailable","apiKey","process","env","REACT_APP_XAMAN_API_KEY","REACT_APP_XUMM_API_KEY","apiSecret","REACT_APP_XAMAN_API_SECRET","REACT_APP_XUMM_API_SECRET","console","log","warn","error","convertStringToHex","str","encoder","TextEncoder","bytes","encode","hex","b","toString","padStart","userWalletStatus","isAvailable","message","createUserDonationPayload","destination","amount","charity","causeId","donorEmail","success","payloadId","Date","now","qrCode","memo","Memo","MemoData","JSON","stringify","timestamp","toISOString","paymentAmount","value","String","currency","issuer","request","TransactionType","Destination","Memos","Amount","payload","create","uuid","_payload$refs","refs","qr_png","Error","_error$response","_error$response$data","response","data","fallback","checkUserPaymentStatus","status","_payload$response","_payload$response2","get","account","signed","transactionHash","txid","getUserWalletQRCode","_refs","createDemoUserWallet","demoAddress","demoSseed","address","seed"],"sources":["C:/Users/Alex Salsali/Desktop/Eunoia-Atlas-POC/frontend/src/services/userWalletService.ts"],"sourcesContent":["// User Wallet Service for XRPL Donations\nimport { XummSdk } from 'xumm-sdk';\n\n// Check if XUMM SDK is available\nlet xumm: XummSdk | null = null;\nlet isXummAvailable = false;\n\ntry {\n  let apiKey = process.env.REACT_APP_XAMAN_API_KEY || process.env.REACT_APP_XUMM_API_KEY;\n  let apiSecret = process.env.REACT_APP_XAMAN_API_SECRET || process.env.REACT_APP_XUMM_API_SECRET;\n  if (!apiKey || !apiSecret) {\n    // Fallback for demo if build-time env didn’t inject\n    apiKey = 'ba1b287b-3c39-4db2-a5d3-78e5d9ce61d5';\n    apiSecret = 'a23f1e70-bb23-4e3f-98e5-b2ef3ad02d1c';\n  }\n  \n  if (apiKey && apiSecret && apiKey !== 'your-api-key' && apiSecret !== 'your-api-secret') {\n    xumm = new XummSdk(apiKey, apiSecret);\n    isXummAvailable = true;\n    console.log('Xaman (XUMM) SDK initialized for user wallets');\n  } else {\n    console.warn('Xaman credentials not properly configured for user wallets');\n  }\n} catch (error) {\n  console.error('Failed to initialize Xaman SDK for user wallets:', error);\n  isXummAvailable = false;\n}\n\n// Convert string to hex for memo data (browser-safe, no Node Buffer)\nfunction convertStringToHex(str: string): string {\n  const encoder = new TextEncoder();\n  const bytes = encoder.encode(str);\n  let hex = '';\n  for (const b of bytes) hex += b.toString(16).padStart(2, '0');\n  return hex;\n}\n\n// User wallet status\nexport const userWalletStatus = {\n  isAvailable: isXummAvailable,\n  message: isXummAvailable ? 'User wallet integration active' : 'User wallet integration disabled - using demo mode'\n};\n\n// Create a donation payload for user to sign\nexport async function createUserDonationPayload(\n  destination: string,\n  amount: number,\n  charity: string,\n  causeId: string,\n  donorEmail?: string\n): Promise<any> {\n  if (!isXummAvailable || !xumm) {\n    console.warn('Xaman not available, returning mock payload');\n    return {\n      success: true,\n      payloadId: `mock-user-${Date.now()}`,\n      qrCode: `https://xumm.app/sign/mock-user-${Date.now()}`,\n      message: 'User wallet (Xaman) integration disabled - using demo mode'\n    };\n  }\n\n  const memo = {\n    Memo: {\n      MemoData: convertStringToHex(JSON.stringify({\n        charity,\n        causeId,\n        donorEmail,\n        timestamp: new Date().toISOString()\n      })),\n    },\n  };\n\n  const paymentAmount = {\n    value: String(amount),\n    currency: '524C555344000000000000000000000000000000', // RLUSD\n    issuer: 'rQhWct2fv4Vc4KRjRgMrxa8xPN9Zx9iLKV',\n  };\n\n  const request = {\n    TransactionType: 'Payment' as const,\n    Destination: destination,\n    Memos: [memo],\n    Amount: paymentAmount,\n  };\n\n  try {\n    const payload = await xumm.payload.create(request);\n    \n    if (payload && payload.uuid) {\n      return {\n        success: true,\n        payloadId: payload.uuid,\n        qrCode: payload.refs?.qr_png || '',\n        message: 'Payment payload created successfully'\n      };\n    } else {\n      throw new Error('Failed to create payload');\n    }\n  } catch (error: any) {\n    console.error('Error creating user donation payload (Xaman):', error);\n    const message = error?.response?.data?.error || error?.message || 'Failed to create payment payload';\n    return {\n      success: false,\n      error: message,\n      fallback: true\n    };\n  }\n}\n\n// Check user payment status\nexport async function checkUserPaymentStatus(payloadId: string): Promise<any> {\n  if (!isXummAvailable || !xumm) {\n    console.warn('Xaman not available, returning mock status');\n    return {\n      status: 'pending',\n      message: 'User wallet (Xaman) integration disabled'\n    };\n  }\n\n  try {\n    const payload = await xumm.payload.get(payloadId);\n    return {\n      status: payload?.response?.account || 'pending',\n      signed: !!payload?.response,\n      message: payload?.response ? 'Payment completed' : 'Payment pending',\n      transactionHash: payload?.response?.txid || null\n    };\n  } catch (error) {\n    console.error('Error checking user payment status:', error);\n    return {\n      status: 'error',\n      message: 'Failed to check payment status'\n    };\n  }\n}\n\n// Get user wallet QR code\nexport async function getUserWalletQRCode(payloadId: string): Promise<string> {\n  if (!isXummAvailable || !xumm) {\n    console.warn('Xaman not available, returning fallback QR code');\n    return `https://xumm.app/sign/${payloadId}`;\n  }\n\n  try {\n    const payload = await xumm.payload.get(payloadId);\n    return (payload as any)?.refs?.qr_png || `https://xumm.app/sign/${payloadId}`;\n  } catch (error) {\n    console.error('Error getting user wallet QR code (Xaman):', error);\n    return `https://xumm.app/sign/${payloadId}`;\n  }\n}\n\n// Create a simple user wallet (for demo purposes)\nexport function createDemoUserWallet(): { address: string; seed: string } {\n  // This is a demo wallet - in production, users would create their own\n  const demoAddress = 'rDemoUser123456789012345678901234567890';\n  const demoSseed = 'sDemoSeed123456789012345678901234567890';\n  \n  return {\n    address: demoAddress,\n    seed: demoSseed\n  };\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}