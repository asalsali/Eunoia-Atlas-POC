{"ast":null,"code":"// CROSSMARK (browser extension) helper for XRPL Testnet payments\n\n// Declare extension shape\n\n// Convert string to hex (browser-safe)\nfunction toHex(input) {\n  const bytes = new TextEncoder().encode(input);\n  let hex = '';\n  for (const b of bytes) hex += b.toString(16).padStart(2, '0');\n  return hex;\n}\nexport const RLUSD_HEX = '524C555344000000000000000000000000000000';\nexport const RLUSD_ISSUER_TESTNET = 'rQhWct2fv4Vc4KRjRgMrxa8xPN9Zx9iLKV';\nexport function isCrossmarkAvailable() {\n  var _window$crossmark;\n  return typeof window !== 'undefined' && !!((_window$crossmark = window.crossmark) !== null && _window$crossmark !== void 0 && _window$crossmark.request);\n}\nexport async function connectCrossmark() {\n  if (!isCrossmarkAvailable()) return {\n    ok: false,\n    error: 'CROSSMARK extension not found'\n  };\n  try {\n    var _resp, _resp2, _resp2$result, _resp3, _resp3$accounts, _resp4, _resp5, _resp5$result;\n    // 1) Ping to wake up the extension (some builds lazy-load)\n    try {\n      await window.crossmark.request({\n        command: 'ping'\n      });\n    } catch {}\n\n    // 2) Try to get accounts directly (prompts connect on some versions)\n    let resp = null;\n    try {\n      resp = await window.crossmark.request({\n        command: 'accounts'\n      });\n    } catch {}\n\n    // 3) Explicit login if no accounts\n    if (!resp || !resp.address && !resp.accounts) {\n      try {\n        resp = await window.crossmark.request({\n          command: 'crossmark_login'\n        });\n      } catch {}\n    }\n\n    // 4) Fallback to explicit getAddress\n    if (!resp || !resp.address && !resp.accounts) {\n      try {\n        resp = await window.crossmark.request({\n          command: 'crossmark_getAddress'\n        });\n      } catch {}\n    }\n    const address = ((_resp = resp) === null || _resp === void 0 ? void 0 : _resp.address) || ((_resp2 = resp) === null || _resp2 === void 0 ? void 0 : (_resp2$result = _resp2.result) === null || _resp2$result === void 0 ? void 0 : _resp2$result.account) || ((_resp3 = resp) === null || _resp3 === void 0 ? void 0 : (_resp3$accounts = _resp3.accounts) === null || _resp3$accounts === void 0 ? void 0 : _resp3$accounts[0]);\n    const network = ((_resp4 = resp) === null || _resp4 === void 0 ? void 0 : _resp4.network) || ((_resp5 = resp) === null || _resp5 === void 0 ? void 0 : (_resp5$result = _resp5.result) === null || _resp5$result === void 0 ? void 0 : _resp5$result.network);\n    if (!address) return {\n      ok: false,\n      error: 'Unable to retrieve address from CROSSMARK',\n      raw: resp\n    };\n    return {\n      ok: true,\n      address,\n      network,\n      raw: resp\n    };\n  } catch (e) {\n    return {\n      ok: false,\n      error: (e === null || e === void 0 ? void 0 : e.message) || 'Failed to connect CROSSMARK',\n      raw: e\n    };\n  }\n}\nexport async function signRlusdPaymentWithCrossmark(params) {\n  if (!isCrossmarkAvailable()) {\n    return {\n      ok: false,\n      error: 'CROSSMARK extension not found'\n    };\n  }\n  const issuer = params.issuer || RLUSD_ISSUER_TESTNET;\n  const txjson = {\n    TransactionType: 'Payment',\n    Destination: params.destination,\n    Amount: {\n      value: String(params.amount),\n      currency: RLUSD_HEX,\n      issuer\n    },\n    Memos: [{\n      Memo: {\n        MemoData: toHex(JSON.stringify({\n          charity: params.charity,\n          causeId: params.causeId,\n          timestamp: new Date().toISOString()\n        }))\n      }\n    }]\n  };\n  try {\n    var _result$result;\n    const result = await window.crossmark.request({\n      command: 'signAndSubmit',\n      network: 'testnet',\n      txjson\n    });\n    const txid = (result === null || result === void 0 ? void 0 : result.txid) || (result === null || result === void 0 ? void 0 : result.hash) || (result === null || result === void 0 ? void 0 : (_result$result = result.result) === null || _result$result === void 0 ? void 0 : _result$result.hash);\n    return {\n      ok: !!txid,\n      txid,\n      explorer: txid ? `https://testnet.xrpl.org/transactions/${txid}` : undefined,\n      raw: result,\n      error: txid ? undefined : 'Signing failed or was rejected'\n    };\n  } catch (e) {\n    return {\n      ok: false,\n      error: (e === null || e === void 0 ? void 0 : e.message) || 'Crossmark sign failed',\n      raw: e\n    };\n  }\n}","map":{"version":3,"names":["toHex","input","bytes","TextEncoder","encode","hex","b","toString","padStart","RLUSD_HEX","RLUSD_ISSUER_TESTNET","isCrossmarkAvailable","_window$crossmark","window","crossmark","request","connectCrossmark","ok","error","_resp","_resp2","_resp2$result","_resp3","_resp3$accounts","_resp4","_resp5","_resp5$result","command","resp","address","accounts","result","account","network","raw","e","message","signRlusdPaymentWithCrossmark","params","issuer","txjson","TransactionType","Destination","destination","Amount","value","String","amount","currency","Memos","Memo","MemoData","JSON","stringify","charity","causeId","timestamp","Date","toISOString","_result$result","txid","hash","explorer","undefined"],"sources":["C:/Users/Alex Salsali/Desktop/Eunoia-Atlas-POC/frontend/src/services/crossmarkService.ts"],"sourcesContent":["// CROSSMARK (browser extension) helper for XRPL Testnet payments\n\n// Declare extension shape\ndeclare global {\n  interface Window {\n    crossmark?: {\n      request: (args: any) => Promise<any>\n    }\n  }\n}\n\n// Convert string to hex (browser-safe)\nfunction toHex(input: string): string {\n  const bytes = new TextEncoder().encode(input);\n  let hex = '';\n  for (const b of bytes) hex += b.toString(16).padStart(2, '0');\n  return hex;\n}\n\nexport const RLUSD_HEX = '524C555344000000000000000000000000000000';\nexport const RLUSD_ISSUER_TESTNET = 'rQhWct2fv4Vc4KRjRgMrxa8xPN9Zx9iLKV';\n\nexport function isCrossmarkAvailable(): boolean {\n  return typeof window !== 'undefined' && !!window.crossmark?.request;\n}\n\nexport async function connectCrossmark(): Promise<{ ok: boolean; address?: string; network?: string; error?: string; raw?: any }> {\n  if (!isCrossmarkAvailable()) return { ok: false, error: 'CROSSMARK extension not found' };\n  try {\n    // 1) Ping to wake up the extension (some builds lazy-load)\n    try { await window.crossmark!.request({ command: 'ping' }); } catch {}\n\n    // 2) Try to get accounts directly (prompts connect on some versions)\n    let resp: any = null;\n    try { resp = await window.crossmark!.request({ command: 'accounts' }); } catch {}\n\n    // 3) Explicit login if no accounts\n    if (!resp || (!resp.address && !resp.accounts)) {\n      try { resp = await window.crossmark!.request({ command: 'crossmark_login' }); } catch {}\n    }\n\n    // 4) Fallback to explicit getAddress\n    if (!resp || (!resp.address && !resp.accounts)) {\n      try { resp = await window.crossmark!.request({ command: 'crossmark_getAddress' }); } catch {}\n    }\n\n    const address = resp?.address || resp?.result?.account || resp?.accounts?.[0];\n    const network = resp?.network || resp?.result?.network;\n    if (!address) return { ok: false, error: 'Unable to retrieve address from CROSSMARK', raw: resp };\n    return { ok: true, address, network, raw: resp };\n  } catch (e: any) {\n    return { ok: false, error: e?.message || 'Failed to connect CROSSMARK', raw: e };\n  }\n}\n\nexport async function signRlusdPaymentWithCrossmark(params: {\n  destination: string;\n  amount: number;\n  charity: string;\n  causeId: string;\n  issuer?: string;\n}): Promise<{ ok: boolean; txid?: string; explorer?: string; error?: string; raw?: any }> {\n  if (!isCrossmarkAvailable()) {\n    return { ok: false, error: 'CROSSMARK extension not found' };\n  }\n\n  const issuer = params.issuer || RLUSD_ISSUER_TESTNET;\n\n  const txjson = {\n    TransactionType: 'Payment' as const,\n    Destination: params.destination,\n    Amount: {\n      value: String(params.amount),\n      currency: RLUSD_HEX,\n      issuer\n    },\n    Memos: [\n      {\n        Memo: {\n          MemoData: toHex(\n            JSON.stringify({\n              charity: params.charity,\n              causeId: params.causeId,\n              timestamp: new Date().toISOString()\n            })\n          )\n        }\n      }\n    ]\n  };\n\n  try {\n    const result = await window.crossmark!.request({\n      command: 'signAndSubmit',\n      network: 'testnet',\n      txjson\n    });\n\n    const txid = result?.txid || result?.hash || result?.result?.hash;\n    return {\n      ok: !!txid,\n      txid,\n      explorer: txid ? `https://testnet.xrpl.org/transactions/${txid}` : undefined,\n      raw: result,\n      error: txid ? undefined : 'Signing failed or was rejected'\n    };\n  } catch (e: any) {\n    return { ok: false, error: e?.message || 'Crossmark sign failed', raw: e };\n  }\n}\n\n\n"],"mappings":"AAAA;;AAEA;;AASA;AACA,SAASA,KAAKA,CAACC,KAAa,EAAU;EACpC,MAAMC,KAAK,GAAG,IAAIC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;EAC7C,IAAII,GAAG,GAAG,EAAE;EACZ,KAAK,MAAMC,CAAC,IAAIJ,KAAK,EAAEG,GAAG,IAAIC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC7D,OAAOH,GAAG;AACZ;AAEA,OAAO,MAAMI,SAAS,GAAG,0CAA0C;AACnE,OAAO,MAAMC,oBAAoB,GAAG,oCAAoC;AAExE,OAAO,SAASC,oBAAoBA,CAAA,EAAY;EAAA,IAAAC,iBAAA;EAC9C,OAAO,OAAOC,MAAM,KAAK,WAAW,IAAI,CAAC,GAAAD,iBAAA,GAACC,MAAM,CAACC,SAAS,cAAAF,iBAAA,eAAhBA,iBAAA,CAAkBG,OAAO;AACrE;AAEA,OAAO,eAAeC,gBAAgBA,CAAA,EAA4F;EAChI,IAAI,CAACL,oBAAoB,CAAC,CAAC,EAAE,OAAO;IAAEM,EAAE,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAgC,CAAC;EACzF,IAAI;IAAA,IAAAC,KAAA,EAAAC,MAAA,EAAAC,aAAA,EAAAC,MAAA,EAAAC,eAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,aAAA;IACF;IACA,IAAI;MAAE,MAAMb,MAAM,CAACC,SAAS,CAAEC,OAAO,CAAC;QAAEY,OAAO,EAAE;MAAO,CAAC,CAAC;IAAE,CAAC,CAAC,MAAM,CAAC;;IAErE;IACA,IAAIC,IAAS,GAAG,IAAI;IACpB,IAAI;MAAEA,IAAI,GAAG,MAAMf,MAAM,CAACC,SAAS,CAAEC,OAAO,CAAC;QAAEY,OAAO,EAAE;MAAW,CAAC,CAAC;IAAE,CAAC,CAAC,MAAM,CAAC;;IAEhF;IACA,IAAI,CAACC,IAAI,IAAK,CAACA,IAAI,CAACC,OAAO,IAAI,CAACD,IAAI,CAACE,QAAS,EAAE;MAC9C,IAAI;QAAEF,IAAI,GAAG,MAAMf,MAAM,CAACC,SAAS,CAAEC,OAAO,CAAC;UAAEY,OAAO,EAAE;QAAkB,CAAC,CAAC;MAAE,CAAC,CAAC,MAAM,CAAC;IACzF;;IAEA;IACA,IAAI,CAACC,IAAI,IAAK,CAACA,IAAI,CAACC,OAAO,IAAI,CAACD,IAAI,CAACE,QAAS,EAAE;MAC9C,IAAI;QAAEF,IAAI,GAAG,MAAMf,MAAM,CAACC,SAAS,CAAEC,OAAO,CAAC;UAAEY,OAAO,EAAE;QAAuB,CAAC,CAAC;MAAE,CAAC,CAAC,MAAM,CAAC;IAC9F;IAEA,MAAME,OAAO,GAAG,EAAAV,KAAA,GAAAS,IAAI,cAAAT,KAAA,uBAAJA,KAAA,CAAMU,OAAO,OAAAT,MAAA,GAAIQ,IAAI,cAAAR,MAAA,wBAAAC,aAAA,GAAJD,MAAA,CAAMW,MAAM,cAAAV,aAAA,uBAAZA,aAAA,CAAcW,OAAO,OAAAV,MAAA,GAAIM,IAAI,cAAAN,MAAA,wBAAAC,eAAA,GAAJD,MAAA,CAAMQ,QAAQ,cAAAP,eAAA,uBAAdA,eAAA,CAAiB,CAAC,CAAC;IAC7E,MAAMU,OAAO,GAAG,EAAAT,MAAA,GAAAI,IAAI,cAAAJ,MAAA,uBAAJA,MAAA,CAAMS,OAAO,OAAAR,MAAA,GAAIG,IAAI,cAAAH,MAAA,wBAAAC,aAAA,GAAJD,MAAA,CAAMM,MAAM,cAAAL,aAAA,uBAAZA,aAAA,CAAcO,OAAO;IACtD,IAAI,CAACJ,OAAO,EAAE,OAAO;MAAEZ,EAAE,EAAE,KAAK;MAAEC,KAAK,EAAE,2CAA2C;MAAEgB,GAAG,EAAEN;IAAK,CAAC;IACjG,OAAO;MAAEX,EAAE,EAAE,IAAI;MAAEY,OAAO;MAAEI,OAAO;MAAEC,GAAG,EAAEN;IAAK,CAAC;EAClD,CAAC,CAAC,OAAOO,CAAM,EAAE;IACf,OAAO;MAAElB,EAAE,EAAE,KAAK;MAAEC,KAAK,EAAE,CAAAiB,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEC,OAAO,KAAI,6BAA6B;MAAEF,GAAG,EAAEC;IAAE,CAAC;EAClF;AACF;AAEA,OAAO,eAAeE,6BAA6BA,CAACC,MAMnD,EAAyF;EACxF,IAAI,CAAC3B,oBAAoB,CAAC,CAAC,EAAE;IAC3B,OAAO;MAAEM,EAAE,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAgC,CAAC;EAC9D;EAEA,MAAMqB,MAAM,GAAGD,MAAM,CAACC,MAAM,IAAI7B,oBAAoB;EAEpD,MAAM8B,MAAM,GAAG;IACbC,eAAe,EAAE,SAAkB;IACnCC,WAAW,EAAEJ,MAAM,CAACK,WAAW;IAC/BC,MAAM,EAAE;MACNC,KAAK,EAAEC,MAAM,CAACR,MAAM,CAACS,MAAM,CAAC;MAC5BC,QAAQ,EAAEvC,SAAS;MACnB8B;IACF,CAAC;IACDU,KAAK,EAAE,CACL;MACEC,IAAI,EAAE;QACJC,QAAQ,EAAEnD,KAAK,CACboD,IAAI,CAACC,SAAS,CAAC;UACbC,OAAO,EAAEhB,MAAM,CAACgB,OAAO;UACvBC,OAAO,EAAEjB,MAAM,CAACiB,OAAO;UACvBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC,CACH;MACF;IACF,CAAC;EAEL,CAAC;EAED,IAAI;IAAA,IAAAC,cAAA;IACF,MAAM5B,MAAM,GAAG,MAAMlB,MAAM,CAACC,SAAS,CAAEC,OAAO,CAAC;MAC7CY,OAAO,EAAE,eAAe;MACxBM,OAAO,EAAE,SAAS;MAClBO;IACF,CAAC,CAAC;IAEF,MAAMoB,IAAI,GAAG,CAAA7B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE6B,IAAI,MAAI7B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE8B,IAAI,MAAI9B,MAAM,aAANA,MAAM,wBAAA4B,cAAA,GAAN5B,MAAM,CAAEA,MAAM,cAAA4B,cAAA,uBAAdA,cAAA,CAAgBE,IAAI;IACjE,OAAO;MACL5C,EAAE,EAAE,CAAC,CAAC2C,IAAI;MACVA,IAAI;MACJE,QAAQ,EAAEF,IAAI,GAAG,yCAAyCA,IAAI,EAAE,GAAGG,SAAS;MAC5E7B,GAAG,EAAEH,MAAM;MACXb,KAAK,EAAE0C,IAAI,GAAGG,SAAS,GAAG;IAC5B,CAAC;EACH,CAAC,CAAC,OAAO5B,CAAM,EAAE;IACf,OAAO;MAAElB,EAAE,EAAE,KAAK;MAAEC,KAAK,EAAE,CAAAiB,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEC,OAAO,KAAI,uBAAuB;MAAEF,GAAG,EAAEC;IAAE,CAAC;EAC5E;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}